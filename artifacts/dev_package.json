{
	"id": "4e762811-0528-458f-9481-f04cf656439f",
	"createdAt": "2023-09-17T11:23:44.000Z",
	"createdBy": "ole-andre.haugen@neptune-software.com",
	"git": {
		"remote": "https://github.com/OleAndreHaugen/coopworkshp"
	},
	"name": "coop-putaway",
	"description": "Coop: Putaway",
	"ver": "23.9.20.731",
	"enableCICD": true,
	"apps": [
		{
			"id": "6f1f3ce2-97f8-416c-b021-e744423351a5",
			"application": "coop_bins",
			"title": "",
			"description": "",
			"package": {
				"id": "4e762811-0528-458f-9481-f04cf656439f",
				"createdAt": "2023-09-17T11:23:44.000Z",
				"updatedAt": "2023-09-20T05:31:18.000Z",
				"createdBy": "ole-andre.haugen@neptune-software.com",
				"changedBy": "ole-andre.haugen@neptune-software.com",
				"git": {
					"packageJSON": [
						"==OBJECT STRING==",
						"{",
						"  \"name\": \"coop-putaway\",",
						"  \"version\": \"1.0.0\",",
						"  \"description\": \"Coop: Putaway\",",
						"  \"author\": \"Neptune Software\",",
						"  \"license\": \"LicenseRef-LICENSE\",",
						"  \"private\": true,",
						"  \"scripts\": {",
						"    \"deploy\": \"ts-node src/deploy.ts\",",
						"    \"test\": \"jest --passWithNoTests\"",
						"  },",
						"  \"engines\": {",
						"    \"node\": \"18\"",
						"  },",
						"  \"devDependencies\": {",
						"    \"@types/jest\": \"^29.2.0\",",
						"    \"typescript\": \"^4.8.4\",",
						"    \"ts-node\": \"^10.9.1\",",
						"    \"axios\": \"^1.1.3\",",
						"    \"jest\": \"^29.2.2\",",
						"    \"ts-jest\": \"^29.0.3\"",
						"  }",
						"}",
						""
					],
					"workflow": [
						"==OBJECT STRING==",
						"name: Example deploy workflow",
						"",
						"on:",
						"  push:",
						"",
						"jobs:",
						"",
						"  build:",
						"",
						"    runs-on: ubuntu-latest",
						"",
						"    strategy:",
						"      matrix:",
						"        node-version: [18.x]",
						"",
						"    steps:",
						"    - uses: actions/checkout@v2",
						"    - name: Installing node.js ${{ matrix.node-version }}",
						"      uses: actions/setup-node@v1",
						"      with:",
						"        node-version: ${{ matrix.node-version }}",
						"",
						"    - run: npm install",
						"",
						"    # Comment out to run the deploy script when you push to the repository.",
						"    #- run: npm run deploy",
						"    #  env:",
						"    #    DXP_OE_SERVER_URL: ${{ secrets.CDCI_STAGING_URL }}",
						"    #    DXP_OE_SERVER_TOKEN: ${{ secrets.CDCI_STAGING_TOKEN }}",
						"    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}",
						"",
						"    # Comment out to run test script after deployment.",
						"    #- run: npm run test",
						"    #  env:",
						"    #    DXP_OE_SERVER_URL: ${{ secrets.CDCI_STAGING_URL }}",
						"    #    DXP_OE_SERVER_TOKEN: ${{ secrets.CDCI_STAGING_TOKEN }}",
						""
					],
					"deploy": [
						"==OBJECT STRING==",
						"/**",
						" * Example deployment file.",
						" */",
						"",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"import * as path from 'path';",
						"import * as fs from 'fs';",
						"",
						"const serverUrl = process.env.DXP_OE_SERVER_URL;",
						"const serverToken = process.env.DXP_OE_SERVER_TOKEN;",
						"const githubToken = process.env.GITHUB_TOKEN;",
						"",
						"const deleteUrl = (server: string) => `${server}/api/functions/Package/DelPackageAndArtifacts`",
						"const cloneUrl = (server: string) => `${server}/api/functions/Package/CloneRepository`;",
						"const getUrl = (server: string) => `${server}/api/functions/Package/Get`;",
						"const importUrl = (server: string) => `${server}/api/functions/Package/ImportRepository`;",
						"",
						"const httpsAgent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"async function axiosPost(url: string, data: unknown, config: Record<string, unknown> = {}) {",
						"    return axios.post(url, data, { httpsAgent, headers: {",
						"            'Authorization': `Bearer ${serverToken}`,",
						"        }, ...config});",
						"}",
						"",
						"async function readFile(",
						"    path: fs.PathLike,",
						"    options?: { encoding?: BufferEncoding; flag?: string } | BufferEncoding,",
						"): Promise<string | Buffer> {",
						"    return new Promise((resolve, reject) => {",
						"        fs.readFile(path, options, (err, data) => {",
						"            err ? reject(err) : resolve(data);",
						"        });",
						"    });",
						"}",
						"",
						"async function readPackageFile() {",
						"    const content = await readFile(path.join(path.join(process.cwd(), 'artifacts'), 'dev_package.json'), 'utf-8') as string;",
						"    return JSON.parse(content);",
						"}",
						"",
						"async function getPackageFromServer(id: string): Promise<boolean> {",
						"    try {",
						"        await axiosPost(getUrl(serverUrl), { id });",
						"        return true;",
						"    } catch (e) {",
						"        if (e.response.status === 404) {",
						"            return false;",
						"        }",
						"        console.error('Error getting package from server');",
						"        throw e;",
						"    }",
						"}",
						"",
						"(async () => {",
						"    try {",
						"        const devPackage = await readPackageFile();",
						"        const id = devPackage.id;",
						"        const url = devPackage.git.remote;",
						"",
						"        const packageExists = await getPackageFromServer(id);",
						"        if (!packageExists) {",
						"            console.log('Package does not exist on server, cloning...');",
						"            const cloneResult = await axiosPost(cloneUrl(serverUrl), {url, auth: {authType: 1, token: githubToken}});",
						"            console.log('Package has been cloned on server');",
						"            const errorLog = cloneResult.data.importLog.data.filter(entry => entry.transferStatus === 'Error');",
						"            if (errorLog.length > 0) {",
						"                console.warn(`One or more artifacts failed to deploy`, errorLog);",
						"            }",
						"            return process.exit(0);",
						"        }",
						"",
						"        console.log('Package exists on server, importing...');",
						"        const importResult = await axiosPost(importUrl(serverUrl), {id, branch: 'master', auth: {authType: 1, token: githubToken}, forceUpdate: true});",
						"        console.log('Package has been imported on server');",
						"        const errorLog = importResult.data.importLog.data.filter(entry => entry.transferStatus === 'Error');",
						"        if (errorLog.length > 0) {",
						"            console.warn(`One or more artifacts failed to deploy`, errorLog);",
						"        }",
						"",
						"    } catch (e) {",
						"        console.error('Failed to deploy package', e);",
						"    }",
						"    process.exit(0);",
						"})();",
						""
					],
					"test": [
						"==OBJECT STRING==",
						"/**",
						" * Example test file after deployment.",
						" */",
						"",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"",
						"const serverUrl = process.env.DXP_OE_SERVER_URL;",
						"const serverToken = process.env.DXP_OE_SERVER_TOKEN;",
						"",
						"const healtzUrl = (server: string) => `${server}/healthz`;",
						"",
						"const httpsAgent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"async function axiosGet(url: string, config: Record<string, unknown> = {}) {",
						"    return axios.get(url, { httpsAgent, headers: {",
						"            'Authorization': `Bearer ${serverToken}`,",
						"        }, ...config});",
						"}",
						"",
						"describe(`Running test script after deployment to ${serverUrl}`, () => {",
						"",
						"    test('Server healtz', async () => {",
						"        const response = await axiosGet(healtzUrl(serverUrl));",
						"        expect(response.status).toBe(200);",
						"    });",
						"",
						"    /**",
						"     * More tests...",
						"     */",
						"});",
						""
					],
					"remote": "https://github.com/OleAndreHaugen/coopworkshp",
					"head": "dfc30baa18c6f00e545864bb11d25fa555eb6661",
					"readme": "Coop Workshop"
				},
				"name": "coop-putaway",
				"description": "Coop: Putaway",
				"ver": "23.9.20.731",
				"enableCICD": true
			}
		}
	],
	"api": [
		{
			"id": "7751521b-c878-4d6a-81f5-0fe9b0c82e65",
			"name": "zb2c_order_putaway",
			"description": null,
			"apiGroup": null
		}
	],
	"odataSource": [],
	"odataMock": [],
	"dictionary": [],
	"jsclass": [],
	"jsscript_group": [],
	"theme": [],
	"pdf": [],
	"rulesengine": [],
	"reports": [],
	"api_authentication": [],
	"api_group": [],
	"tile": [],
	"category": [],
	"launchpad": [
		{
			"id": "9fd5c017-c4a9-4e44-8011-f6f2890bf9eb",
			"name": "Coop",
			"description": "Coop"
		}
	],
	"certificates": [],
	"role": [],
	"systems": [],
	"doc": [],
	"wf_notifications": [],
	"department": [],
	"script_scheduler": [],
	"wf_definition": [],
	"connector": [],
	"events": [],
	"code_snippets": [],
	"wf_determination": [],
	"wf_taskaction": []
}